import requests
import pytest
from paypal_auth import authenticateUser
import os
import random
import string
from payloads import INVOICE_PAYLOAD

HOST = "https://api-m.sandbox.paypal.com"

tokens = {}

@pytest.fixture(autouse=True)
def authenticate_users():
    tokens['userA'] = authenticateUser(os.getenv('USERACLIENT'), os.getenv('USERASECRET'))
    tokens['userB'] = authenticateUser(os.getenv('USERBCLIENT'), os.getenv('USERBSECRET'))

def create_invoice(user):
   # Create an invoice and return the ID. Invoice numbers must be unique.
   invoice_body = INVOICE_PAYLOAD
   invoice_body['detail']['invoice_number'] = ''.join(random.choice(string.ascii_letters) for _ in range(24))

   user_response = requests.post(HOST + f"/v2/invoicing/invoices", json=invoice_body, headers={"Authorization": "Bearer " + tokens[user], "Prefer": "return=representation" })
   print(f"Created {user_response.json()['id']}")
   return user_response.json()['id']

def delete_invoice(invoice_id, user):
   print(f"Deleted {invoice_id}")
   requests.delete(HOST + f"/v2/invoicing/invoices/{invoice_id}", headers={"Authorization": "Bearer " + tokens[user] })
   
def test_get_invoices():
    user_a_invoices = []
    clean_up = False
    
    # Get userA's invoices
    user_response_a = requests.get(
        HOST + "/v2/invoicing/invoices?total_required=true&fields=amount",
        headers={"Authorization": "Bearer " + tokens['userA']})
    
    # Populate userA's invoices list
    for item in user_response_a.json().get('items', []):
        user_a_invoices.append(item['id'])

    # If userA does not have an invoice, let's create one!
    if not user_a_invoices:
        user_a_invoices.append(create_invoice("userA"))
        clean_up = True

    # Access userB's invoices with userA's token (testing for IDOR)
    for invoice in user_a_invoices:
        user_response_b = requests.get(
            HOST + f"/v2/invoicing/invoices/{invoice}",
            headers={"Authorization": "Bearer " + tokens['userB']
        })
        if user_response_b.status_code != 403:
            if clean_up: 
                delete_invoice(invoice,"userA")
            assert False
    
    if clean_up:
        delete_invoice(user_a_invoices[0], "userA")
    assert True
